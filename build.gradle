buildscript {
    ext {
        kotlinVersion = '1.2.21'
        springBootVersion = '2.0.0.M7'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}


apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'findbugs'

group = 'com.und'
version = '0.2.0'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


jacocoTestReport {
    reports {
        xml.enabled
        csv.enabled
        html.destination file("${buildDir}/reports/jacoco.Html")
    }
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
        reportLevel = "low"
        ignoreFailures = true
        html.destination file("${buildDir}/reports/findBugs.Html")
    }
}

ext {
    swaggerVersion = '2.7.0'
    springCloudVersion = 'Finchley.M5'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/libs-snapshot' }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    jcenter()
    mavenLocal()
}


jar {
    group = 'com.und'
    baseName = 'clientpanel'
    version = '0.2.0'
}



dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-config-client')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server')
    compile('org.springframework.cloud:spring-cloud-starter-openfeign')
    //compile('org.springframework.cloud:spring-cloud-stream-binder-kstream')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile("org.springframework.boot:spring-boot-starter-mobile:1.5.9.RELEASE")
    compile('org.flywaydb:flyway-core:5.0.7')
    compile('org.springframework.kafka:spring-kafka')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-quartz')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    //compile("org.jetbrains.kotlin:kotlin-stdlib-jre8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.9.4'
    compile("org.springframework.kafka:spring-kafka")
    compile("org.springframework.kafka:spring-kafka-test")
    compile ("com.und:auth-client:0.4.0-SNAPSHOT")
    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('org.postgresql:postgresql')
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    testCompile('org.springframework.security:spring-security-test')
    testCompile group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.5.0'
    testCompile 'org.mockito:mockito-core:1.+'
    //compile("log4j:log4j")
    compile("io.springfox:springfox-swagger2:$swaggerVersion")
    compile("io.springfox:springfox-swagger-ui:$swaggerVersion")

    //web-push
    compile group: 'nl.martijndwars', name: 'web-push', version: '3.0.1'

    //fcm
    // https://mvnrepository.com/artifact/de.bytefish.fcmjava/fcmjava-core
    compile group: 'de.bytefish.fcmjava', name: 'fcmjava-core', version: '2.4'
    // https://mvnrepository.com/artifact/de.bytefish.fcmjava/fcmjava-client
    compile group: 'de.bytefish.fcmjava', name: 'fcmjava-client', version: '2.4'
}

/*dependencies {

    compile(
            "org.aspectj:aspectjrt",
            "org.aspectj:aspectjweaver",

    )
    compile('org.springframework.cloud:spring-cloud-starter-eureka:2.0.0.M2')
    ompile('org.springframework.cloud:spring-cloud-starter-feign')


    compile("org.springframework.kafka:spring-kafka")
    compile("org.springframework.kafka:spring-kafka-test")
    compile group: 'javax.mail', name: 'mail', version: '1.5.0-b01'




}*/

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}



